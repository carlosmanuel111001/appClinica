// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using appClinica.Adapters.SQLServerDataAccess.Contexts;

namespace appClinica.Adapters.SQLServerDataAccess.Migrations
{
    [DbContext(typeof(ClinicaDB))]
    partial class ClinicaDBModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.0");

            modelBuilder.Entity("appClinica.Core.Domain.Models.Cita", b =>
                {
                    b.Property<Guid>("citaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("especialistaId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("fechaRegistro")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("fechaVisita")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("pacienteId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("sintomas")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("citaId");

                    b.HasIndex("pacienteId");

                    b.ToTable("tblCitas");
                });

            modelBuilder.Entity("appClinica.Core.Domain.Models.Diagnostico", b =>
                {
                    b.Property<Guid>("especialistaId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("citaId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("descripcionDiagnostico")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("descripcionMalestar")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("estadoDiagnostico")
                        .HasColumnType("bit");

                    b.Property<DateTime>("fechaDiagnostico")
                        .HasColumnType("datetime2");

                    b.HasKey("especialistaId", "citaId");

                    b.HasIndex("citaId");

                    b.ToTable("tblDiagnosticos");
                });

            modelBuilder.Entity("appClinica.Core.Domain.Models.Especialista", b =>
                {
                    b.Property<Guid>("especialistaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("apellidos")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("bandera")
                        .HasColumnType("bit");

                    b.Property<string>("especialidad")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("nombres")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("usuarioId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("especialistaId");

                    b.HasIndex("usuarioId")
                        .IsUnique();

                    b.ToTable("tblEspecialistas");
                });

            modelBuilder.Entity("appClinica.Core.Domain.Models.Paciente", b =>
                {
                    b.Property<Guid>("pacienteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("apellidos")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("bandera")
                        .HasColumnType("bit");

                    b.Property<DateTime>("fechaNacimiento")
                        .HasColumnType("datetime2");

                    b.Property<string>("nombres")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("sexo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("usuarioId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("pacienteId");

                    b.HasIndex("usuarioId")
                        .IsUnique();

                    b.ToTable("tblPacientes");
                });

            modelBuilder.Entity("appClinica.Core.Domain.Models.Usuario", b =>
                {
                    b.Property<Guid>("usuarioId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("bandera")
                        .HasColumnType("bit");

                    b.Property<string>("contraseña")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("correo")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("usuarioId");

                    b.ToTable("tblUsuarios");
                });

            modelBuilder.Entity("appClinica.Core.Domain.Models.Cita", b =>
                {
                    b.HasOne("appClinica.Core.Domain.Models.Paciente", "Paciente")
                        .WithMany("Citas")
                        .HasForeignKey("pacienteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Paciente");
                });

            modelBuilder.Entity("appClinica.Core.Domain.Models.Diagnostico", b =>
                {
                    b.HasOne("appClinica.Core.Domain.Models.Cita", "Cita")
                        .WithMany("Diagnosticos")
                        .HasForeignKey("citaId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("appClinica.Core.Domain.Models.Especialista", "Especialista")
                        .WithMany("Diagnosticos")
                        .HasForeignKey("especialistaId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Cita");

                    b.Navigation("Especialista");
                });

            modelBuilder.Entity("appClinica.Core.Domain.Models.Especialista", b =>
                {
                    b.HasOne("appClinica.Core.Domain.Models.Usuario", "Usuario")
                        .WithOne("Especialista")
                        .HasForeignKey("appClinica.Core.Domain.Models.Especialista", "usuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("appClinica.Core.Domain.Models.Paciente", b =>
                {
                    b.HasOne("appClinica.Core.Domain.Models.Usuario", "Usuario")
                        .WithOne("Paciente")
                        .HasForeignKey("appClinica.Core.Domain.Models.Paciente", "usuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("appClinica.Core.Domain.Models.Cita", b =>
                {
                    b.Navigation("Diagnosticos");
                });

            modelBuilder.Entity("appClinica.Core.Domain.Models.Especialista", b =>
                {
                    b.Navigation("Diagnosticos");
                });

            modelBuilder.Entity("appClinica.Core.Domain.Models.Paciente", b =>
                {
                    b.Navigation("Citas");
                });

            modelBuilder.Entity("appClinica.Core.Domain.Models.Usuario", b =>
                {
                    b.Navigation("Especialista");

                    b.Navigation("Paciente");
                });
#pragma warning restore 612, 618
        }
    }
}
